CREATE EXTENSION test_undo_api;
--
-- This test will insert the data in the undo using undo api and after that
-- it will fetch the data and verify that whether we have got the same data
-- back or not.
--
SELECT test_undo_api();
 test_undo_api 
---------------
 
(1 row)

--
-- These tests are for testing different scenarios w.r.t transactions.
--
-- Normal transactions
-- Undo records are sorted by rmgr id, database id, block and offset before
-- performing rollbacks.
BEGIN;
SELECT test_undo_insert('UNDO_PERMANENT',2,2);
NOTICE:  Insert undo record: block: 2, offset: 2, undo_op: 0, reloid: 0
 test_undo_insert 
------------------
 
(1 row)

SELECT test_undo_insert('UNDO_PERMANENT',2,1);
NOTICE:  Insert undo record: block: 2, offset: 1, undo_op: 0, reloid: 0
 test_undo_insert 
------------------
 
(1 row)

SELECT test_undo_insert('UNDO_PERMANENT',1,2);
NOTICE:  Insert undo record: block: 1, offset: 2, undo_op: 0, reloid: 0
 test_undo_insert 
------------------
 
(1 row)

SELECT test_undo_insert('UNDO_PERMANENT',1,1);
NOTICE:  Insert undo record: block: 1, offset: 1, undo_op: 0, reloid: 0
 test_undo_insert 
------------------
 
(1 row)

ROLLBACK;
NOTICE:  Rollback undo record: block: 1, offset: 1, undo_op: 0, reloid: 0
NOTICE:  Rollback undo record: block: 1, offset: 2, undo_op: 0, reloid: 0
NOTICE:  Rollback undo record: block: 2, offset: 1, undo_op: 0, reloid: 0
NOTICE:  Rollback undo record: block: 2, offset: 2, undo_op: 0, reloid: 0
BEGIN;
SELECT test_undo_insert('UNDO_TEMP',1,1);
NOTICE:  Insert undo record: block: 1, offset: 1, undo_op: 0, reloid: 0
 test_undo_insert 
------------------
 
(1 row)

SELECT test_undo_insert('UNDO_TEMP',1,2);
NOTICE:  Insert undo record: block: 1, offset: 2, undo_op: 0, reloid: 0
 test_undo_insert 
------------------
 
(1 row)

ROLLBACK;
NOTICE:  Rollback undo record: block: 1, offset: 1, undo_op: 0, reloid: 0
NOTICE:  Rollback undo record: block: 1, offset: 2, undo_op: 0, reloid: 0
-- Sub-transactions --
BEGIN;
SELECT test_undo_insert('UNDO_PERMANENT',1,1);
NOTICE:  Insert undo record: block: 1, offset: 1, undo_op: 0, reloid: 0
 test_undo_insert 
------------------
 
(1 row)

SAVEPOINT a;
SELECT test_undo_insert('UNDO_PERMANENT',1,2);
NOTICE:  Insert undo record: block: 1, offset: 2, undo_op: 0, reloid: 0
 test_undo_insert 
------------------
 
(1 row)

ROLLBACK to a;
NOTICE:  Rollback undo record: block: 1, offset: 2, undo_op: 0, reloid: 0
SELECT test_undo_insert('UNDO_PERMANENT',1,3);
NOTICE:  Insert undo record: block: 1, offset: 3, undo_op: 0, reloid: 0
 test_undo_insert 
------------------
 
(1 row)

ROLLBACK;
NOTICE:  Rollback undo record: block: 1, offset: 3, undo_op: 0, reloid: 0
NOTICE:  Rollback undo record: block: 1, offset: 1, undo_op: 0, reloid: 0
BEGIN;
SELECT test_undo_insert('UNDO_TEMP',1,1);
NOTICE:  Insert undo record: block: 1, offset: 1, undo_op: 0, reloid: 0
 test_undo_insert 
------------------
 
(1 row)

SAVEPOINT a;
SELECT test_undo_insert('UNDO_TEMP',1,2);
NOTICE:  Insert undo record: block: 1, offset: 2, undo_op: 0, reloid: 0
 test_undo_insert 
------------------
 
(1 row)

ROLLBACK to a;
NOTICE:  Rollback undo record: block: 1, offset: 2, undo_op: 0, reloid: 0
SELECT test_undo_insert('UNDO_TEMP',1,3);
NOTICE:  Insert undo record: block: 1, offset: 3, undo_op: 0, reloid: 0
 test_undo_insert 
------------------
 
(1 row)

ROLLBACK;
NOTICE:  Rollback undo record: block: 1, offset: 3, undo_op: 0, reloid: 0
NOTICE:  Rollback undo record: block: 1, offset: 1, undo_op: 0, reloid: 0
-- Error inside transactions --
BEGIN;
SELECT test_undo_insert('UNDO_PERMANENT',1,1);
NOTICE:  Insert undo record: block: 1, offset: 1, undo_op: 0, reloid: 0
 test_undo_insert 
------------------
 
(1 row)

SELECT 1/0;
NOTICE:  Rollback undo record: block: 1, offset: 1, undo_op: 0, reloid: 0
ERROR:  division by zero
ROLLBACK;
