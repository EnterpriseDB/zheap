--
-- Test cases for ZHeap
--
set client_min_messages = warning;
--
-- 1. Test for storage engine
--
-- Normal heap
CREATE TABLE t1_heap
(
 a int
);
\d+ t1_heap;
                                  Table "public.t1_heap"
 Column |  Type   | Collation | Nullable | Default | Storage | Stats target | Description 
--------+---------+-----------+----------+---------+---------+--------------+-------------
 a      | integer |           |          |         | plain   |              | 

-- Zheap heap
CREATE TABLE t1_zheap
(
 a int
) WITH (storage_engine = 'zheap');
\d+ t1_zheap;
                                 Table "public.t1_zheap"
 Column |  Type   | Collation | Nullable | Default | Storage | Stats target | Description 
--------+---------+-----------+----------+---------+---------+--------------+-------------
 a      | integer |           |          |         | plain   |              | 
Options: storage_engine=zheap

-- Should throw error
CREATE TABLE t1_invalid
(
 a int
) WITH (storage_engine = 'invalid');
ERROR:  invalid value for "storage_engine" option
DETAIL:  Valid values are "heap" and "zheap".
-- Should throw error - not supported feature
ALTER TABLE t1_heap  set (storage_engine='zheap');
ERROR:  storage_engine option can't be modified.
HINT:  please re-create the table with the modified storage_engine
ALTER TABLE t1_heap  reset (storage_engine);
ERROR:  storage_engine option can't be modified.
HINT:  please re-create the table with the modified storage_engine
ALTER TABLE t1_zheap  set (storage_engine='heap');
ERROR:  storage_engine option can't be modified.
HINT:  please re-create the table with the modified storage_engine
ALTER TABLE t1_zheap  reset (storage_engine);
ERROR:  storage_engine option can't be modified.
HINT:  please re-create the table with the modified storage_engine
DROP TABLE t1_heap;
DROP TABLE t1_zheap;
--
-- 2. Test for Index Scan on zheap
--
set enable_seqscan to false;
set enable_indexonlyscan to false;
set enable_indexscan to true;
set enable_bitmapscan to false;
create table btree_zheap_tbl(id int4, t text) WITH (storage_engine='zheap', autovacuum_enabled=false);
create index btree_zheap_idx on btree_zheap_tbl (id);
insert into btree_zheap_tbl
  select g, g::text || '_' ||
            (select string_agg(md5(i::text), '_') from generate_series(1, 50) i)
			from generate_series(1, 100) g;
-- check the plan with index scan
explain (costs false) select * from btree_zheap_tbl where id=1;
                     QUERY PLAN                      
-----------------------------------------------------
 Index Scan using btree_zheap_idx on btree_zheap_tbl
   Index Cond: (id = 1)
(2 rows)

select id from btree_zheap_tbl where id=1;
 id 
----
  1
(1 row)

-- update a non-key column and delete a row
update btree_zheap_tbl set t='modified' where id=1;
select * from btree_zheap_tbl where id = 1;
 id |    t     
----+----------
  1 | modified
(1 row)

delete from btree_zheap_tbl where id=2;
select * from btree_zheap_tbl where id = 2;
 id | t 
----+---
(0 rows)

-- index creation on non-empty zheap relation. SHOULD FAIL!!
create index btree_zheap_idx1 on btree_zheap_tbl (id, t);
ERROR:  cannot create index on non-empty zheap relation
drop table btree_zheap_tbl;
--
--3. Test for aggregate nodes
--
CREATE TABLE aggtest_zheap
(
 a int,
 b int
) WITH (storage_engine = 'zheap');
INSERT INTO aggtest_zheap SELECT g,g FROM generate_series(1,1000) g;
SELECT sum(a) AS sum_198 FROM aggtest_zheap;
 sum_198 
---------
  500500
(1 row)

SELECT max(aggtest_zheap.a) AS max_3 FROM aggtest_zheap;
 max_3 
-------
  1000
(1 row)

SELECT stddev_pop(b) FROM aggtest_zheap;
    stddev_pop    
------------------
 288.674990257210
(1 row)

SELECT stddev_samp(b) FROM aggtest_zheap;
   stddev_samp    
------------------
 288.819436095749
(1 row)

SELECT var_pop(b) FROM aggtest_zheap;
      var_pop       
--------------------
 83333.250000000000
(1 row)

SELECT var_samp(b) FROM aggtest_zheap;
      var_samp      
--------------------
 83416.666666666667
(1 row)

SELECT stddev_pop(b::numeric) FROM aggtest_zheap;
    stddev_pop    
------------------
 288.674990257210
(1 row)

SELECT stddev_samp(b::numeric) FROM aggtest_zheap;
   stddev_samp    
------------------
 288.819436095749
(1 row)

SELECT var_pop(b::numeric) FROM aggtest_zheap;
      var_pop       
--------------------
 83333.250000000000
(1 row)

SELECT var_samp(b::numeric) FROM aggtest_zheap;
      var_samp      
--------------------
 83416.666666666667
(1 row)

DROP TABLE aggtest_zheap;
set client_min_messages = notice;
--
--4. Test for PRIMARY KEY on zheap tables.
--
CREATE TABLE pkey_test_zheap
(
 a int PRIMARY KEY,
 b int
) WITH (storage_engine = 'zheap');
-- should run suucessfully.
INSERT INTO pkey_test_zheap VALUES (10, 30);
-- should error out, primary key doesn't allow NULL value.
INSERT INTO pkey_test_zheap(b) VALUES (30);
ERROR:  null value in column "a" violates not-null constraint
DETAIL:  Failing row contains (null, 30).
-- should error out, primary key doesn't allow duplicate value.
INSERT INTO pkey_test_zheap VALUES (10, 30);
ERROR:  duplicate key value violates unique constraint "pkey_test_zheap_pkey"
DETAIL:  Key (a)=(10) already exists.
SELECT * FROM pkey_test_zheap;
 a  | b  
----+----
 10 | 30
 10 | 30
(2 rows)

DROP TABLE pkey_test_zheap;
